{"/home/travis/build/npmtest/node-npmtest-dreamjs/test.js":"/* istanbul instrument in package npmtest_dreamjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dreamjs/lib.npmtest_dreamjs.js":"/* istanbul instrument in package npmtest_dreamjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dreamjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dreamjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dreamjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dreamjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dreamjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dreamjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dreamjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_dreamjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dreamjs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_dreamjs.__dirname +\n                    '/lib.npmtest_dreamjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dreamjs/node_modules/dreamjs/dream.js":"'use strict';\n\nvar _ = require('lodash');\nvar RandExp = require('randexp');\nvar chance = require('chance').Chance();\nvar djson = require('describe-json');\n\nvar _schemas = [];\nvar _customTypes = [\n  {\n    name: 'number',\n    customType: function() {\n      return chance.natural();\n    }\n  },\n  {\n    name: 'boolean',\n    customType: function() {\n      return chance.bool();\n    }\n  },\n  {\n    name: 'null',\n    customType: function() {\n      return null;\n    }\n  },\n  {\n    name: 'string',\n    customType: function() {\n      return chance.string();\n    }\n  },\n  {\n    name: 'array',\n    customType: function() {\n      return [];\n    }\n  },\n  {\n    name: 'object',\n    customType: function() {\n      return {};\n    }\n  },\n  {\n    name: 'function',\n    customType: function() {\n      return function() { };\n    }\n  }\n];\n\nvar _dreamHelper = {\n  chance: chance,\n  oneOf: function(collection) {\n    return _.sample(collection);\n  }\n};\n\nvar _defaultOutput = {\n  Dream: 'Hello World'\n};\n\nvar _genericSchema = {\n  name: 'generic',\n  schema: {\n    default: String\n  }\n};\n\nfunction Dream() {\n  var self = this;\n  self._dreamHelper = _dreamHelper;\n\n  self.defaultSchema = function(schema) {\n    _genericSchema = validateAndReturnSchema(schema);\n    return self;\n  };\n\n  self.useSchema = function useSchema(schema) {\n    var schemaToUse;\n    var dreamInstance;\n\n    schemaToUse = validateAndReturnSchema(schema);\n    dreamInstance = new Dream();\n    dreamInstance.schema(schemaToUse);\n    dreamInstance._selectedSchema = schemaToUse;\n\n    return dreamInstance;\n  };\n\n  self.input = function input(value) {\n    self._dreamHelper.input = value;\n    return (self);\n  };\n\n  self.generateSchema = function() {\n    var describedJson;\n    var schemaName = '';\n    var jsonInput = '';\n    var validatedJsonInput;\n    var guessProperties = false;\n    var newSchema;\n    var args = [];\n\n    Array.prototype.push.apply(args, arguments);\n\n    args.forEach(function(argument) {\n      switch (typeof (argument)) {\n        case 'string':\n          schemaName = argument;\n          break;\n        case 'object':\n          jsonInput = argument;\n          break;\n        case 'boolean':\n          guessProperties = argument;\n          break;\n      }\n    });\n\n    validatedJsonInput = _.first(_.flatten([jsonInput]));\n    describedJson = djson.describe(validatedJsonInput || {});\n\n    newSchema = {\n      name: schemaName || 'generic',\n      schema: describedJson\n    };\n\n    if (guessProperties === true) {\n      newSchema.schema = guessCustomTypes(describedJson);\n    }\n    addOrReplace(_schemas, newSchema);\n    return self;\n  };\n\n  self.customType = function(typeName, customType) {\n    var newCustomType = {};\n    var validTypeName;\n\n    validTypeName = typeof (typeName) === 'string' ? typeName : 'generic';\n\n    if (customType.constructor === RegExp) {\n      newCustomType = {\n        name: validTypeName,\n        customType: function() {\n          return new RandExp(customType).gen();\n        }\n      };\n    } else if (typeof (customType) === 'function') {\n      newCustomType = {\n        name: validTypeName,\n        customType: customType\n      };\n    } else {\n      newCustomType = {\n        name: validTypeName,\n        customType: function() {\n          return '[Invalid Custom Type]';\n        }\n      };\n    }\n\n    addOrReplace(_customTypes, newCustomType);\n\n    return self;\n  };\n\n  self.cleanse = function() {\n    self._output = null;\n    self._selectedSchema = null;\n  };\n\n  self.output = function output(callback) {\n    var output;\n\n    output = self._output || generateOutput();\n    self.cleanse();\n\n    if (typeof (callback) === 'function') {\n      callback(null, output);\n      return self;\n    } else {\n      return output;\n    }\n\n  };\n\n  self.schema = function schema(value) {\n    var validatedSchema;\n    var newSchema;\n    var args = [];\n\n    Array.prototype.push.apply(args, arguments);\n\n    if (args.length > 1) {\n      newSchema = {\n        name: typeof (args[0]) === 'string' ? args.shift() : 'generic',\n        schema: typeof (args[0]) === 'object' ? args.shift() : {}\n      };\n    } else {\n      newSchema = value;\n    }\n\n    validatedSchema = validateAndReturnSchema(newSchema);\n\n    if (validatedSchema.name === 'generic') {\n      self._selectedSchema = validatedSchema;\n    } else {\n\n      addOrReplace(_schemas, validatedSchema);\n\n      if (_schemas.length === 1) {\n        self._selectedSchema = validatedSchema;\n      }\n    }\n\n    return self;\n  };\n\n  self.generate = function generate(amount, generateRandomData) {\n    var outputItem;\n    var iterations = amount || 1;\n    var outputArray = [];\n\n    self._currentRecord = null;\n\n    for (var i = 0; i < iterations; i++) {\n      outputItem = generateOutputFromSchema(selectAvailableSchema(), generateRandomData);\n      outputArray.push(outputItem);\n      self._currentRecord = outputItem;\n    }\n\n    self._output = outputArray.length === 1 ? outputArray[0] : outputArray;\n    return self;\n  };\n\n  self.generateRnd = function generateRnd(amount) {\n    return self.generate(amount, true);\n  };\n\n  function addOrReplace(collection, item) {\n    var index;\n\n    index = _.indexOf(collection, _.find(collection, { name: item.name }));\n    if (index >= 0) {\n      collection.splice(index, 1, item);\n    } else {\n      collection.push(item);\n    }\n\n    return collection;\n  };\n\n  function guessCustomTypes(schemaObject) {\n    var customTypeExists;\n    var temporaryList = [];\n\n    _.forIn(schemaObject, function(value, key) {\n      if (typeof (value) === 'object') {\n        if (Array.isArray(value)) {\n          value.forEach(function(item) {\n            if (typeof (item) === 'object') {\n              temporaryList.push(guessCustomTypes(item));\n            } else {\n              temporaryList.push(item.toString());\n            }\n          });\n          schemaObject[key] = temporaryList;\n        } else {\n          schemaObject[key] = guessCustomTypes(value);\n        }\n      } else {\n        customTypeExists = _.find(_customTypes, { name: key.toString() });\n\n        if (typeof (chance[key.toString()]) === 'function' || customTypeExists !== undefined) {\n          schemaObject[key] = key.toString();\n        }\n      }\n    });\n\n    return schemaObject;\n  };\n\n  function validateAndReturnSchema(schema) {\n    if (isValidSchema(schema)) return schema;\n\n    if (typeof (schema) === 'string') {\n      var foundSchema = _.findWhere(_schemas, { name: schema });\n      return isValidSchema(foundSchema) ? foundSchema : _genericSchema;\n    }\n\n    if (typeof (schema) === 'object') {\n      return {\n        name: 'generic',\n        schema: schema\n      };\n    }\n\n    return _genericSchema;\n  };\n\n  function selectAvailableSchema() {\n    if (self._selectedSchema) {\n      return self._selectedSchema;\n    }\n\n    if (thereIsSchema() && _schemas.length === 1) {\n      return _schemas[0];\n    }\n\n    return _genericSchema;\n  };\n\n  function generateOutput() {\n    if (self._selectedSchema) {\n      return generateOutputFromSchema(self._selectedSchema);\n    } else {\n      return _defaultOutput;\n    }\n\n  };\n\n  function generateOutputFromSchema(schema, generateValues) {\n    var outputObject = {};\n    var schemaToUse = validateAndReturnSchema(schema);\n\n    _.forIn(schemaToUse.schema, function(value, key) {\n      outputObject[key] = getValueFromType(value, generateValues);\n    });\n\n    return outputObject;\n  };\n\n  function getValueFromType(propertyType, generateValues) {\n    var temporaryList = [];\n    var temporaryObject = {};\n    var temporaryValue;\n    var customTypeIndex;\n    var customTypeNeedle;\n    var context = self;\n    var types = {\n        'number': Number,\n        'string': String,\n        'boolean': Boolean,\n        'array': Array,\n        'object': Object,\n        'function': Function,\n        'date': Date\n      };\n\n    if (propertyType.constructor === RegExp) {\n      if (generateValues) {\n        return new RandExp(propertyType).gen();\n      } else {\n        return types[typeof (new RandExp(propertyType).gen())]();\n      }\n    }\n\n    var typesHandle = {\n      'string': stringHandle,\n      'function': functionHandle,\n      'object': objHandle,\n      'default': defaultHandle\n    };\n\n    return (typesHandle[typeof (propertyType)] || typesHandle['default'])();\n\n    function stringHandle() {\n      var value;\n      customTypeNeedle = _.find(_customTypes, { name: propertyType });\n      customTypeIndex = _.indexOf(_customTypes, customTypeNeedle);\n\n      if (customTypeIndex >= 0) {\n        self._dreamHelper.previousItem = self._currentRecord;\n        temporaryValue = customTypeNeedle.customType(self._dreamHelper);\n      } else {\n        if (propertyType === 'array') {\n          temporaryValue = [];\n        } else {\n          temporaryValue = (typeof (chance[propertyType]) === 'function') ? chance[propertyType]() : '[Unknown Custom Type]';\n        }\n      }\n\n      if (generateValues) {\n        value = temporaryValue;\n      } else {\n        value = types[typeof (temporaryValue)]();\n      }\n\n      return value;\n    }\n\n    function functionHandle() {\n      var value;\n      temporaryValue = propertyType();\n\n      if (propertyType === Date) {\n        value = new Date(temporaryValue);\n      } else {\n\n        if (generateValues) {\n          customTypeNeedle = _.find(_customTypes, { name: typeof (temporaryValue) });\n          value = isNative(propertyType) ? customTypeNeedle.customType() : temporaryValue;\n        } else {\n          value = Array.isArray(temporaryValue) ? types['array']() : types[typeof (temporaryValue)]();\n        }\n\n      }\n      return value\n    }\n\n    function objHandle() {\n      var value;\n      if (Array.isArray(propertyType)) {\n        propertyType.forEach(function(item) {\n          temporaryList.push(getValueFromType.call(context, item, generateValues));\n        });\n\n        value = temporaryList;\n      } else {\n        _.forIn(propertyType, function(value, key) {\n          temporaryObject[key] = getValueFromType.call(context, value, generateValues);\n        });\n\n        value = temporaryObject;\n      }\n      return value;\n    }\n\n    function defaultHandle() {\n      return '[Invalid Property]';\n    }\n\n  };\n\n  function isValidSchema(schema) {\n    return _.has(schema, 'name') && _.has(schema, 'schema');\n  };\n\n  function thereIsSchema() {\n    return _schemas.length > 0;\n  };\n\n  function isNative(fn) {\n    return (/^function\\s*[a-z0-9_\\$]*\\s*\\([^)]*\\)\\s*\\{\\s*\\[native code\\]\\s*\\}/i).test('' + fn);\n  }\n\n}\n\nmodule.exports = new Dream();\n"}